{
  "blogs": [
    {
      "title": "My Server",
      "body": "Creating a server on Django involves several straightforward steps. First, you install Django using the pip package manager. Next, you create a Django project, which generates a directory with necessary configurations. After navigating into this project directory, you can start the development server with the `runserver` command, making the server accessible at `http://127.0.0.1:8000/`. To add functionality, you create a Django app within the project. In this app, you define models, which are Python classes representing your database structure. Once the models are set, you apply migrations to update the database schema. Your app is then registered in the project's settings. You create views to handle web requests and return responses, and map these views to specific URLs. Finally, you include your app’s URL patterns in the project's main URL configuration and restart the server to see your changes in action.",
      "author": "Siva",
      "id": "1"
    },
    {
      "title": "My NewWebsite",
      "body": "Creating a website using React involves several key steps. First, you install Node.js, which includes npm, the package manager. Using npm, you then install the `create-react-app` tool and generate a new React project with it. This creates a directory with all necessary files and configurations. You navigate into this directory and start the development server with the `npm start` command, making the site accessible at `http://localhost:3000/`. Within this project, you can create components, which are reusable pieces of the UI, by defining them in JavaScript files. You then manage the application state using React’s built-in hooks like `useState` and `useEffect`. To style your components, you can use CSS or libraries like styled-components. You can fetch data from APIs using tools like `fetch` or libraries like `axios`. Once your site is ready, you build it for production with `npm run build` and deploy the resulting static files to a web server or hosting service.",
      "author": "Naga",
      "id": "2"
    },
    {
      "title": "Forgot Password-Backend",
      "body": "Adding a forgot password feature to a Django project involves several steps. First, ensure your Django project is set up with email configurations in the `settings.py` file, including email backend, host, port, and credentials. Next, in your Django app, create a form for password reset, typically by extending Django's built-in `PasswordResetForm`. You then create a view for handling password reset requests, utilizing Django's `PasswordResetView`, which sends an email with a password reset link. This link directs users to a password reset confirmation view, managed by Django’s `PasswordResetConfirmView`, where they can set a new password.In your `urls.py`, include the URLs for these views, usually provided by Django’s `auth` app. Customize email templates for the password reset email and confirmation pages as needed, ensuring they match your site's design. In the password reset email, include a link that uses the token generated by Django’s `PasswordResetTokenGenerator`. Test the feature by requesting a password reset, checking the email, and following the link to reset the password.  Make sure to handle any edge cases, such as invalid or expired tokens, by displaying appropriate messages to the user. Finally, ensure your Django application is running with proper HTTPS settings to secure the password reset process. This completes the integration of a forgot password feature in your Django project, allowing users to securely reset their passwords via email.",
      "author": "Naveen",
      "id": "3"
    },
    {
      "id": "52fd",
      "title": "Welcome to bloggersHome",
      "body": "lorem ipsum....",
      "author": "Naga"
    },
    {
      "id": "8d78",
      "title": "Machine Learning",
      "body": "ML is a substet of Artificial Intelligence",
      "author": "Siva"
    }
  ]
}